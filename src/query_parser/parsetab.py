
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = "AND ID IN NO NOT OR SOMEquery : compose1compose1 : compose1 OR compose2compose1 : compose2compose2 : compose2 AND atomiccompose2 : atomicatomic : SOME expressionatomic : NO expressionatomic : expression IN expressionatomic : NOT atomicatomic : '(' compose1 ')'expression : expression '+' termexpression : expression '&' termexpression : expression '-' termexpression : termterm : term '.' term1term : term1term1 : IDterm1 : '~' term1term1 : '(' expression ')'"
    
_lr_action_items = {'SOME':([0,8,9,14,15,],[5,5,5,5,5,]),'NO':([0,8,9,14,15,],[7,7,7,7,7,]),'NOT':([0,8,9,14,15,],[8,8,8,8,8,]),'(':([0,5,7,8,9,13,14,15,17,18,19,20,21,26,],[9,17,17,9,9,17,9,9,17,17,17,17,17,17,]),'ID':([0,5,7,8,9,13,14,15,17,18,19,20,21,26,],[12,12,12,12,12,12,12,12,12,12,12,12,12,12,]),'~':([0,5,7,8,9,13,14,15,17,18,19,20,21,26,],[13,13,13,13,13,13,13,13,13,13,13,13,13,13,]),'$end':([1,2,3,4,10,11,12,16,22,23,27,28,29,31,32,33,34,35,36,37,],[0,-1,-3,-5,-14,-16,-17,-6,-7,-9,-18,-2,-4,-8,-11,-12,-13,-10,-19,-15,]),'OR':([2,3,4,10,11,12,16,22,23,24,27,28,29,31,32,33,34,35,36,37,],[14,-3,-5,-14,-16,-17,-6,-7,-9,14,-18,-2,-4,-8,-11,-12,-13,-10,-19,-15,]),')':([3,4,10,11,12,16,22,23,24,25,27,28,29,30,31,32,33,34,35,36,37,],[-3,-5,-14,-16,-17,-6,-7,-9,35,36,-18,-2,-4,36,-8,-11,-12,-13,-10,-19,-15,]),'AND':([3,4,10,11,12,16,22,23,27,28,29,31,32,33,34,35,36,37,],[15,-5,-14,-16,-17,-6,-7,-9,-18,15,-4,-8,-11,-12,-13,-10,-19,-15,]),'IN':([6,10,11,12,25,27,32,33,34,36,37,],[18,-14,-16,-17,18,-18,-11,-12,-13,-19,-15,]),'+':([6,10,11,12,16,22,25,27,30,31,32,33,34,36,37,],[19,-14,-16,-17,19,19,19,-18,19,19,-11,-12,-13,-19,-15,]),'&':([6,10,11,12,16,22,25,27,30,31,32,33,34,36,37,],[20,-14,-16,-17,20,20,20,-18,20,20,-11,-12,-13,-19,-15,]),'-':([6,10,11,12,16,22,25,27,30,31,32,33,34,36,37,],[21,-14,-16,-17,21,21,21,-18,21,21,-11,-12,-13,-19,-15,]),'.':([10,11,12,27,32,33,34,36,37,],[26,-16,-17,-18,26,26,26,-19,-15,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'query':([0,],[1,]),'compose1':([0,9,],[2,24,]),'compose2':([0,9,14,],[3,3,28,]),'atomic':([0,8,9,14,15,],[4,23,4,4,29,]),'expression':([0,5,7,8,9,14,15,17,18,],[6,16,22,6,25,6,6,30,31,]),'term':([0,5,7,8,9,14,15,17,18,19,20,21,],[10,10,10,10,10,10,10,10,10,32,33,34,]),'term1':([0,5,7,8,9,13,14,15,17,18,19,20,21,26,],[11,11,11,11,11,27,11,11,11,11,11,11,11,37,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> query","S'",1,None,None,None),
  ('query -> compose1','query',1,'p_query_formula','parser.py',21),
  ('compose1 -> compose1 OR compose2','compose1',3,'p_compose1_or','parser.py',25),
  ('compose1 -> compose2','compose1',1,'p_compose1_one','parser.py',34),
  ('compose2 -> compose2 AND atomic','compose2',3,'p_compose2_and','parser.py',38),
  ('compose2 -> atomic','compose2',1,'p_compose2_one','parser.py',47),
  ('atomic -> SOME expression','atomic',2,'p_atomic_some','parser.py',51),
  ('atomic -> NO expression','atomic',2,'p_atomic_no','parser.py',60),
  ('atomic -> expression IN expression','atomic',3,'p_atomic_in','parser.py',69),
  ('atomic -> NOT atomic','atomic',2,'p_atomic_not','parser.py',78),
  ('atomic -> ( compose1 )','atomic',3,'p_atomic_compose','parser.py',87),
  ('expression -> expression + term','expression',3,'p_expression_plus','parser.py',91),
  ('expression -> expression & term','expression',3,'p_expression_and','parser.py',100),
  ('expression -> expression - term','expression',3,'p_expression_minus','parser.py',109),
  ('expression -> term','expression',1,'p_expression_term','parser.py',118),
  ('term -> term . term1','term',3,'p_term_dot','parser.py',122),
  ('term -> term1','term',1,'p_term_one','parser.py',132),
  ('term1 -> ID','term1',1,'p_term1_id','parser.py',136),
  ('term1 -> ~ term1','term1',2,'p_term1_converse','parser.py',143),
  ('term1 -> ( expression )','term1',3,'p_term1_expression','parser.py',152),
]
